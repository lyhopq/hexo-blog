{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/modernist/source/js/scale.fix.js","path":"js/scale.fix.js","modified":0},{"_id":"themes/modernist/source/js/moment.min.js","path":"js/moment.min.js","modified":0},{"_id":"themes/modernist/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/modernist/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/modernist/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/modernist/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/modernist/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/modernist/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/modernist/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/modernist/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/modernist/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/modernist/source/css/images/checker.png","path":"css/images/checker.png","modified":0},{"_id":"themes/modernist/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/modernist/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/modernist/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/modernist/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/modernist/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0},{"_id":"themes/modernist/source/css/fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"css/fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":0},{"_id":"themes/modernist/source/css/fonts/c92rD_x0V1LslSFt3-QEpgRV2F9RPTaqyJ4QibDfkzM.woff","path":"css/fonts/c92rD_x0V1LslSFt3-QEpgRV2F9RPTaqyJ4QibDfkzM.woff","modified":0},{"_id":"themes/modernist/source/css/fonts/QQt14e8dY39u-eYBZmppwTqR_3kx9_hJXbbyU8S6IN0.woff","path":"css/fonts/QQt14e8dY39u-eYBZmppwTqR_3kx9_hJXbbyU8S6IN0.woff","modified":0},{"_id":"themes/modernist/source/css/fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"css/fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":0},{"_id":"themes/modernist/source/css/font.css","path":"css/font.css","modified":0}],"Cache":[{"_id":"source/404.html","shasum":"8eef9d38e32017533204438a2d5e6a25a315e406","modified":1435019825267},{"_id":"source/_posts/C语言结构体对齐算法.md","shasum":"8af0dbd3dbfc1f448d2e24ab20c8772348529f7c","modified":1435018268924},{"_id":"source/_posts/gitignore妙用.md","shasum":"3d409c0d6aaa91818311e0389ccaf1668c9252f3","modified":1435018268924},{"_id":"source/about/index.md","shasum":"3cea5e9107aff1c054cef883f62de8d932ce7c58","modified":1435018775509},{"_id":"themes/modernist/LICENSE","shasum":"099b0b655ec8d809053ad7206fc32d4b66d8d93a","modified":1435108318000},{"_id":"themes/modernist/README.md","shasum":"d63066853f572e293f4a19c17b3e65f993b71c02","modified":1435108318000},{"_id":"themes/modernist/_config.yml","shasum":"6b2247490b4b90e12caf2b92cec16aa23b5e1ad1","modified":1435108318000},{"_id":"themes/modernist/languages/default.yml","shasum":"bbde9b1c157db32eacfd0eb267a9949d09d592e9","modified":1435018268930},{"_id":"themes/modernist/languages/zh-CN.yml","shasum":"6143ffa6867115ad939881c18d0a0ff1d4e4cb39","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/after-footer.ejs","shasum":"6f0d510de778d9ae603e43e59bc2b58d9724f53a","modified":1435108318000},{"_id":"themes/modernist/layout/_partial/archive-post.ejs","shasum":"1ff2121a50db007e9f4978134c0d78969505b557","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/archive.ejs","shasum":"6a5cdcefcafafaf6a09251b166658c1063bdc627","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/article.ejs","shasum":"96e54abf91b8360ef6feea55f0faf08862b47879","modified":1435108318000},{"_id":"themes/modernist/layout/_partial/comment.ejs","shasum":"54a0c3c779d2a6ebe7e88203c6d39c4b20d17364","modified":1435108318000},{"_id":"themes/modernist/layout/_partial/footer.ejs","shasum":"e3facc75e9a9bab27ccd8c4605a2612ca28dda98","modified":1435108318000},{"_id":"themes/modernist/layout/_partial/google-analytics.ejs","shasum":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/head.ejs","shasum":"f9886925f6b7a05edc439cf0238fb2a0f80634be","modified":1435108318000},{"_id":"themes/modernist/layout/_partial/header.ejs","shasum":"db6bb78a9c28f49fa1041e43edd4a119b40446c1","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/pagination.ejs","shasum":"3b19c3790a8e5abc2563bd7874cb32539f9ef40f","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/post/category.ejs","shasum":"53af0ec48fbf2c41f4bd7044a7f1a0d8419a9361","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/post/date.ejs","shasum":"2e103ef24430a40f95c8a220ec3aee1bb0f8c213","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/post/gallery.ejs","shasum":"bd41f384ab7dad35516ce600dfebcd77c308bab9","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/post/tag.ejs","shasum":"1a9dc8f8781a7def8b07445270ef323011b3ce46","modified":1435018268930},{"_id":"themes/modernist/layout/_partial/post/title.ejs","shasum":"cf6347f1a36f851ae7d76b712c9a152041dd428e","modified":1435018268930},{"_id":"themes/modernist/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1435018268930},{"_id":"themes/modernist/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1435018268930},{"_id":"themes/modernist/layout/layout.ejs","shasum":"3ad8bf7068ed84b0fa1c930617734cb7be4a3a94","modified":1435108318000},{"_id":"themes/modernist/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1435018268930},{"_id":"themes/modernist/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1435018268930},{"_id":"themes/modernist/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1435018268930},{"_id":"themes/modernist/source/css/_base/layout.styl","shasum":"455c2647b3c5ac7581aeb70add2f99c8acf2b0df","modified":1435108318000},{"_id":"themes/modernist/source/css/_base/variable.styl","shasum":"c77b0517acee3a8d78060f2d7eaf44b4297aa918","modified":1435108318000},{"_id":"themes/modernist/source/css/_partial/archive.styl","shasum":"d2bd94e52f1f12caed77db890a039c7bfe7e0c36","modified":1435018268930},{"_id":"themes/modernist/source/css/_partial/article.styl","shasum":"c8e27d5ad629a7633c6e1ac2ee767771f3c4212f","modified":1435108318000},{"_id":"themes/modernist/source/css/_partial/comment.styl","shasum":"b8328cdce54bd643b0f0f4d757bffeaaa38c7a56","modified":1435018268930},{"_id":"themes/modernist/source/css/_partial/footer.styl","shasum":"66b8be9cd3b6f474e3c0be5ea4ec45f54d41d357","modified":1435108318000},{"_id":"themes/modernist/source/css/_partial/header.styl","shasum":"2cc5824dc9d54337c54316d09cde4ba404f06305","modified":1435108318000},{"_id":"themes/modernist/source/css/_partial/index.styl","shasum":"5df2ef5d8f6ff83d70a50cc9fa58ed891adc4709","modified":1435018268930},{"_id":"themes/modernist/source/css/_partial/syntax.styl","shasum":"95913e9d5dd94e0148423f6deaa1f7741c5874fe","modified":1435018268930},{"_id":"themes/modernist/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1435018268930},{"_id":"themes/modernist/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1435018268930},{"_id":"themes/modernist/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1435018268934},{"_id":"themes/modernist/source/css/images/checker.png","shasum":"108be8f4c3cfb91ef35050a1120659d946d7ebbc","modified":1435018268934},{"_id":"themes/modernist/source/css/style.styl","shasum":"b77b40bcdfa279ca704a94d1a631929d84be0388","modified":1435108319000},{"_id":"themes/modernist/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1435018268934},{"_id":"themes/modernist/source/fancybox/fancybox_loading.gif","shasum":"48673ea547f521de42a1a2057df6939cafda7ae5","modified":1435018268934},{"_id":"themes/modernist/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1435018268934},{"_id":"themes/modernist/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1435018268934},{"_id":"themes/modernist/source/fancybox/jquery.fancybox.css","shasum":"98644f55b533a25495961ac6fd411ca27807d54d","modified":1435018268934},{"_id":"themes/modernist/source/fancybox/jquery.fancybox.pack.js","shasum":"2629dcc9d237f1244c02de196733830a5723cb90","modified":1435018268934},{"_id":"themes/modernist/source/js/gallery.js","shasum":"e5c7dd04c8992e5c10fc53dc57e57c3fbe2b66c7","modified":1435018268934},{"_id":"themes/modernist/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1435018268934},{"_id":"themes/modernist/source/js/moment.min.js","shasum":"764c7d63fed0b42fbf576c816470d81cb937ecd3","modified":1435018268934},{"_id":"themes/modernist/source/js/scale.fix.js","shasum":"bbf62458c63fca2535965f9dfaacfbc6bc697e03","modified":1435018268934},{"_id":"themes/modernist/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1435018268934},{"_id":"themes/modernist/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1435018268934},{"_id":"themes/modernist/layout/_widget/category.ejs","shasum":"7348a985b72379988d0cff1243db5305225d4dc4","modified":1435022345903},{"_id":"themes/modernist/layout/_widget/recent_posts.ejs","shasum":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1435022345903},{"_id":"themes/modernist/layout/_widget/tagcloud.ejs","shasum":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1435022345903},{"_id":"themes/modernist_/LICENSE","shasum":"099b0b655ec8d809053ad7206fc32d4b66d8d93a","modified":1435022251331},{"_id":"themes/modernist_/README.md","shasum":"d63066853f572e293f4a19c17b3e65f993b71c02","modified":1435022251331},{"_id":"themes/modernist_/_config.yml","shasum":"6b2247490b4b90e12caf2b92cec16aa23b5e1ad1","modified":1435022251331},{"_id":"themes/modernist_/languages/default.yml","shasum":"bbde9b1c157db32eacfd0eb267a9949d09d592e9","modified":1435022251331},{"_id":"themes/modernist_/languages/zh-CN.yml","shasum":"6143ffa6867115ad939881c18d0a0ff1d4e4cb39","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/after-footer.ejs","shasum":"6f0d510de778d9ae603e43e59bc2b58d9724f53a","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/archive-post.ejs","shasum":"1ff2121a50db007e9f4978134c0d78969505b557","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/archive.ejs","shasum":"6a5cdcefcafafaf6a09251b166658c1063bdc627","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/article.ejs","shasum":"96e54abf91b8360ef6feea55f0faf08862b47879","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/baidu-tongji.ejs","shasum":"5b3fc47dafef2a77dfb2f74bd740b30af7c51ab7","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/comment.ejs","shasum":"54a0c3c779d2a6ebe7e88203c6d39c4b20d17364","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/footer.ejs","shasum":"e3facc75e9a9bab27ccd8c4605a2612ca28dda98","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/google-analytics.ejs","shasum":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/head.ejs","shasum":"f9886925f6b7a05edc439cf0238fb2a0f80634be","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/header.ejs","shasum":"db6bb78a9c28f49fa1041e43edd4a119b40446c1","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/pagination.ejs","shasum":"3b19c3790a8e5abc2563bd7874cb32539f9ef40f","modified":1435022251331},{"_id":"themes/modernist_/layout/_partial/post/category.ejs","shasum":"53af0ec48fbf2c41f4bd7044a7f1a0d8419a9361","modified":1435022251334},{"_id":"themes/modernist_/layout/_partial/post/date.ejs","shasum":"2e103ef24430a40f95c8a220ec3aee1bb0f8c213","modified":1435022251334},{"_id":"themes/modernist_/layout/_partial/post/gallery.ejs","shasum":"bd41f384ab7dad35516ce600dfebcd77c308bab9","modified":1435022251334},{"_id":"themes/modernist_/layout/_partial/post/share.ejs","shasum":"dd495190e85f54d5b48684ddf8c6b8df3c14eeee","modified":1435022251334},{"_id":"themes/modernist_/layout/_partial/post/tag.ejs","shasum":"1a9dc8f8781a7def8b07445270ef323011b3ce46","modified":1435022251334},{"_id":"themes/modernist_/layout/_partial/post/title.ejs","shasum":"cf6347f1a36f851ae7d76b712c9a152041dd428e","modified":1435022251334},{"_id":"themes/modernist_/layout/_partial/sidebar.ejs","shasum":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1435022251334},{"_id":"themes/modernist_/layout/_widget/category.ejs","shasum":"7348a985b72379988d0cff1243db5305225d4dc4","modified":1435022251334},{"_id":"themes/modernist_/layout/_widget/recent_posts.ejs","shasum":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1435022251334},{"_id":"themes/modernist_/layout/_widget/tagcloud.ejs","shasum":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1435022251334},{"_id":"themes/modernist_/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1435022251334},{"_id":"themes/modernist_/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1435022251334},{"_id":"themes/modernist_/layout/layout.ejs","shasum":"3ad8bf7068ed84b0fa1c930617734cb7be4a3a94","modified":1435022251334},{"_id":"themes/modernist_/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1435022251334},{"_id":"themes/modernist_/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1435022251334},{"_id":"themes/modernist_/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1435022251334},{"_id":"themes/modernist_/source/css/_base/layout.styl","shasum":"455c2647b3c5ac7581aeb70add2f99c8acf2b0df","modified":1435022251334},{"_id":"themes/modernist_/source/css/_base/variable.styl","shasum":"c77b0517acee3a8d78060f2d7eaf44b4297aa918","modified":1435022251334},{"_id":"themes/modernist_/source/css/_partial/archive.styl","shasum":"d2bd94e52f1f12caed77db890a039c7bfe7e0c36","modified":1435022251334},{"_id":"themes/modernist_/source/css/_partial/article.styl","shasum":"c8e27d5ad629a7633c6e1ac2ee767771f3c4212f","modified":1435022251334},{"_id":"themes/modernist_/source/css/_partial/comment.styl","shasum":"b8328cdce54bd643b0f0f4d757bffeaaa38c7a56","modified":1435022251334},{"_id":"themes/modernist_/source/css/_partial/footer.styl","shasum":"66b8be9cd3b6f474e3c0be5ea4ec45f54d41d357","modified":1435022251334},{"_id":"themes/modernist_/source/css/_partial/header.styl","shasum":"2cc5824dc9d54337c54316d09cde4ba404f06305","modified":1435022251334},{"_id":"themes/modernist_/source/css/_partial/index.styl","shasum":"5df2ef5d8f6ff83d70a50cc9fa58ed891adc4709","modified":1435022251334},{"_id":"themes/modernist_/source/css/_partial/sidebar.styl","shasum":"2017cde35ee18dc7bdb59a2b7db20fadffc4d908","modified":1435022251334},{"_id":"themes/modernist_/source/css/_partial/syntax.styl","shasum":"95913e9d5dd94e0148423f6deaa1f7741c5874fe","modified":1435022251334},{"_id":"themes/modernist_/source/css/font.css","shasum":"f0c45be133671c094be187e494451bcddb22cd8d","modified":1435022251334},{"_id":"themes/modernist_/source/css/fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","shasum":"599c4a04b77ef96478b39fc261c69b9614da3cd8","modified":1435022251334},{"_id":"themes/modernist_/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1435022251337},{"_id":"themes/modernist_/source/css/fonts/QQt14e8dY39u-eYBZmppwTqR_3kx9_hJXbbyU8S6IN0.woff","shasum":"029ffbdc5fd015e2c015c047a0b9f9130c299261","modified":1435022251337},{"_id":"themes/modernist_/source/css/fonts/c92rD_x0V1LslSFt3-QEpgRV2F9RPTaqyJ4QibDfkzM.woff","shasum":"ae93e3840bdc75d8a2686f30e6e38e9999ff1542","modified":1435022251337},{"_id":"themes/modernist_/source/css/fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","shasum":"8e6adf713de0948eba5f7926fe81b9f16c9c7b7c","modified":1435022251337},{"_id":"themes/modernist_/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1435022251337},{"_id":"themes/modernist_/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1435022251341},{"_id":"themes/modernist_/source/css/images/checker.png","shasum":"108be8f4c3cfb91ef35050a1120659d946d7ebbc","modified":1435022251344},{"_id":"themes/modernist_/source/css/style.styl","shasum":"b77b40bcdfa279ca704a94d1a631929d84be0388","modified":1435022251344},{"_id":"themes/modernist_/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1435022251344},{"_id":"themes/modernist_/source/fancybox/fancybox_loading.gif","shasum":"48673ea547f521de42a1a2057df6939cafda7ae5","modified":1435022251344},{"_id":"themes/modernist_/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1435022251344},{"_id":"themes/modernist_/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1435022251344},{"_id":"themes/modernist_/source/fancybox/jquery.fancybox.css","shasum":"98644f55b533a25495961ac6fd411ca27807d54d","modified":1435022251344},{"_id":"themes/modernist_/source/fancybox/jquery.fancybox.pack.js","shasum":"2629dcc9d237f1244c02de196733830a5723cb90","modified":1435022251344},{"_id":"themes/modernist_/source/js/gallery.js","shasum":"e5c7dd04c8992e5c10fc53dc57e57c3fbe2b66c7","modified":1435022251344},{"_id":"themes/modernist_/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1435022251344},{"_id":"themes/modernist_/source/js/moment.min.js","shasum":"764c7d63fed0b42fbf576c816470d81cb937ecd3","modified":1435022251344},{"_id":"themes/modernist_/source/js/scale.fix.js","shasum":"bbf62458c63fca2535965f9dfaacfbc6bc697e03","modified":1435022251344},{"_id":"themes/modernist_/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1435022251341},{"_id":"themes/modernist_/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1435022251341},{"_id":"themes/modernist/layout/_partial/sidebar.ejs","shasum":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1435022251000},{"_id":"themes/modernist/layout/_partial/baidu-tongji.ejs","shasum":"5b3fc47dafef2a77dfb2f74bd740b30af7c51ab7","modified":1435108318000},{"_id":"themes/modernist/layout/_partial/post/share.ejs","shasum":"dd495190e85f54d5b48684ddf8c6b8df3c14eeee","modified":1435108318000},{"_id":"themes/modernist/source/css/_partial/sidebar.styl","shasum":"2017cde35ee18dc7bdb59a2b7db20fadffc4d908","modified":1435108318000},{"_id":"themes/modernist/source/css/font.css","shasum":"f0c45be133671c094be187e494451bcddb22cd8d","modified":1435108318000},{"_id":"themes/modernist/source/css/fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","shasum":"599c4a04b77ef96478b39fc261c69b9614da3cd8","modified":1435108318000},{"_id":"themes/modernist/source/css/fonts/QQt14e8dY39u-eYBZmppwTqR_3kx9_hJXbbyU8S6IN0.woff","shasum":"029ffbdc5fd015e2c015c047a0b9f9130c299261","modified":1435108318000},{"_id":"themes/modernist/source/css/fonts/c92rD_x0V1LslSFt3-QEpgRV2F9RPTaqyJ4QibDfkzM.woff","shasum":"ae93e3840bdc75d8a2686f30e6e38e9999ff1542","modified":1435108318000},{"_id":"themes/modernist/source/css/fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","shasum":"8e6adf713de0948eba5f7926fe81b9f16c9c7b7c","modified":1435108318000},{"_id":"public/css/fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":1435108654441,"shasum":"8e6adf713de0948eba5f7926fe81b9f16c9c7b7c"},{"_id":"public/css/fonts/c92rD_x0V1LslSFt3-QEpgRV2F9RPTaqyJ4QibDfkzM.woff","modified":1435108654444,"shasum":"ae93e3840bdc75d8a2686f30e6e38e9999ff1542"},{"_id":"public/css/fonts/QQt14e8dY39u-eYBZmppwTqR_3kx9_hJXbbyU8S6IN0.woff","modified":1435108654445,"shasum":"029ffbdc5fd015e2c015c047a0b9f9130c299261"},{"_id":"public/css/fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":1435108654446,"shasum":"599c4a04b77ef96478b39fc261c69b9614da3cd8"},{"_id":"public/css/font.css","modified":1435108654448,"shasum":"ba4d5e0489833c2c9941e2f228ef0e4f4df3395d"},{"_id":"public/404.html","modified":1435127667259,"shasum":"ec68e9a9a77b6517d343077cdaca27f9c795f631"},{"_id":"public/about/index.html","modified":1435127667284,"shasum":"4b8dbb766a77591bb36560cd30c9ff499a80790d"},{"_id":"public/2013/10/23/C语言结构体对齐算法/index.html","modified":1435127667338,"shasum":"ea0db2e85c56523c73c6c7c61f928c9db1eade68"},{"_id":"public/2013/10/20/gitignore妙用/index.html","modified":1435127667347,"shasum":"35da9a3c4a741a441738d0ab1afd89b37cd8b57c"},{"_id":"public/archives/index.html","modified":1435127667359,"shasum":"8485a673a499508eef1e6854a2716f3930398fa9"},{"_id":"public/archives/2013/index.html","modified":1435127667369,"shasum":"08beca062ac53b89f0d8cf65e68e0429f9d830a2"},{"_id":"public/archives/2013/10/index.html","modified":1435127667377,"shasum":"f0a0a2eb30f26dd68e4320040737aed845442e07"},{"_id":"public/atom.xml","modified":1435127667391,"shasum":"2cdbb62f7a113deb95e2f2b52ef1d805fff11de1"},{"_id":"public/index.html","modified":1435127667400,"shasum":"0bffe673225419dbeb6a35973a4ab957092ca8a6"},{"_id":"public/tags/Git/index.html","modified":1435127667412,"shasum":"ce556ed6801de5fbf4ad1939005b158258cc8e5d"},{"_id":"public/tags/gitignore/index.html","modified":1435127667434,"shasum":"ff822fa13283df862f9e75699822dc65f884ddc2"},{"_id":"public/tags/结构体对齐/index.html","modified":1435127667442,"shasum":"60c9868fd4cf81c568fbdf75e52dd08c492df3b9"},{"_id":"public/tags/算法/index.html","modified":1435127667451,"shasum":"9ddc76aea31529eca191f4410b2a9b43dab19044"},{"_id":"source/_posts/C语言基础之内存分配.md","shasum":"cac16c8aa22592776e24bf5c2ccdaf7214267188","modified":1435127662000},{"_id":"public/2013/11/12/C语言基础之内存分配/index.html","modified":1435127667322,"shasum":"682a424aecfafc4c04d6205c45bc18e026825901"},{"_id":"public/archives/2013/11/index.html","modified":1435127667383,"shasum":"5f639cf0c5f33d9163b1dbc13ac08f3848f20858"},{"_id":"public/categories/C-C/index.html","modified":1435127667389,"shasum":"7d41f76e0f11c5e15124d67bffe25390470a85b1"},{"_id":"public/tags/内存分配/index.html","modified":1435127667458,"shasum":"d7e134ce580a85c4ba344aac09ab3e174c4d1792"}],"Category":[{"name":"C/C++","_id":"cibadyikq00004q9gccn4fjf7"}],"Data":[],"Page":[{"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n","source":"404.html","raw":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n","date":"2015-06-23T00:37:05.267Z","updated":"2015-06-23T00:37:05.267Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cib8n537h0000d49gix7owkr4"},{"title":"about","date":"2015-06-23T00:19:35.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-06-23 08:19:35\n---\n","updated":"2015-06-23T00:19:35.509Z","path":"about/index.html","comments":1,"layout":"page","_id":"cib8n53870001d49g8jrkl5y7"}],"Post":[{"title":"gitignore妙用","date":"2013-10-20T07:20:16.000Z","_content":"\n使用Git的同学都知道`.gitignore` 配置文件用于配置不需要加入版本管理的文件，对版本管理带来很大的便利。今天有个需求就是忽略版本库下除少数几个文件和文件夹之外的所有文件，首先想到的方式是使用gitignore树的概念，即在需要的文件夹下都添加`.gitignore`文件，并在其中设定相应的规则。但是，这种方式比较麻烦。\n\n好好研究了一下`gitignore`的语法，知道了`.gitignore`文件过滤有两种模式：开放模式和保守模式。\n\n1. 开放模式负责设置过滤哪些文件和文件夹\n\n    例如： \n    \n    /target/ 表示项目根目录下的target文件夹里面所有的内容都会被过滤，不被跟踪\n    .classpath 表示项目根目录下的.classpath文件会被过滤，不被跟踪\n \n2. 保守模式负责设置哪些文件不被过滤，也就是哪些文件要被跟踪\n\n    例如：\n\n    !/target/*.h 表示target文件夹目录下所有的.h文件将被跟踪\n  \n\n还有就是，`gitignore`是从上到下逐行匹配的，因此`.gitignore`文件的编写原则就是：\n\n> 先编写开放模式，在编写保守模式\n\n要不然，开放模式的规则会把保守模式的规则给覆盖了。\n\n下面附上我的`.gitignore`文件的示例：\n\n```\n/*\n!.gitignore\n!/posts/\n```\n\n只跟踪版本库中的`.gitignore`文件和`posts`目录。这里需要注意的是：\n\n> 一定是`/\\*`而不是`\\*`，`/\\*`表示当前目录下的所有文件，而不是所有文件`\\*`；（这是我自己的理解，不知道对不对！）\n\n下面附上`gitignore`的简单语法：\n\n> 以斜杠“/”开头表目录\n\n> 以星号“*”通配多字符\n\n> 以问号“?”通配单字符\n\n> 以方括号“[]”包含单个字符的匹列表\n\n> 以叹号“!”对匹配结果反\n\n","source":"_posts/gitignore妙用.md","raw":"---\ntitle: gitignore妙用\ndate: 2013-10-20 15:20:16\n\ntags: [Git,gitignore]\n\n---\n\n使用Git的同学都知道`.gitignore` 配置文件用于配置不需要加入版本管理的文件，对版本管理带来很大的便利。今天有个需求就是忽略版本库下除少数几个文件和文件夹之外的所有文件，首先想到的方式是使用gitignore树的概念，即在需要的文件夹下都添加`.gitignore`文件，并在其中设定相应的规则。但是，这种方式比较麻烦。\n\n好好研究了一下`gitignore`的语法，知道了`.gitignore`文件过滤有两种模式：开放模式和保守模式。\n\n1. 开放模式负责设置过滤哪些文件和文件夹\n\n    例如： \n    \n    /target/ 表示项目根目录下的target文件夹里面所有的内容都会被过滤，不被跟踪\n    .classpath 表示项目根目录下的.classpath文件会被过滤，不被跟踪\n \n2. 保守模式负责设置哪些文件不被过滤，也就是哪些文件要被跟踪\n\n    例如：\n\n    !/target/*.h 表示target文件夹目录下所有的.h文件将被跟踪\n  \n\n还有就是，`gitignore`是从上到下逐行匹配的，因此`.gitignore`文件的编写原则就是：\n\n> 先编写开放模式，在编写保守模式\n\n要不然，开放模式的规则会把保守模式的规则给覆盖了。\n\n下面附上我的`.gitignore`文件的示例：\n\n```\n/*\n!.gitignore\n!/posts/\n```\n\n只跟踪版本库中的`.gitignore`文件和`posts`目录。这里需要注意的是：\n\n> 一定是`/\\*`而不是`\\*`，`/\\*`表示当前目录下的所有文件，而不是所有文件`\\*`；（这是我自己的理解，不知道对不对！）\n\n下面附上`gitignore`的简单语法：\n\n> 以斜杠“/”开头表目录\n\n> 以星号“*”通配多字符\n\n> 以问号“?”通配单字符\n\n> 以方括号“[]”包含单个字符的匹列表\n\n> 以叹号“!”对匹配结果反\n\n","slug":"gitignore妙用","published":1,"updated":"2015-06-23T00:11:08.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cib8n538b0002d49g5dfwc8ov"},{"title":"C语言结构体对齐算法","date":"2013-10-23T07:20:16.000Z","_content":"\n最近做了一个关于结构体补齐填充的东西，补了一下关于结构体对齐方面的知识（以前也研究过，不过都忘了，所以在这记录一下）。\n\n\n首先看一下结构体对齐的三个概念值： \n\n1\t数据类型的*默认对齐值*（自身对齐）\n  * 基本数据类型：为指定平台上基本类型的长度。如在32位机器中，char对齐值为1，short为2，int,float为4，double为8；\n  * 结构体：其数据成员中默认对齐值最大的那个值。\n    \n2\t*指定对齐值*：#pragma pack (value)时的指定对齐值value。 \n3\t数据类型的*有效对齐值*：默认对齐值和指定对齐值中小的那个值。\n\n有了这些值，我们就可以很方便的来讨论具体数据结构的成员和其自身的对齐方式。有效对齐值N是最终用来决定数据存放地址方式的值，最重要。有效对齐N，就是表示“对齐在N上”，也就是说该数据的`偏移量`%N=0”。而数据结构中的数据变量都是按定义的先后顺序来排放的。第一个数据变量的起始地址就是数据结构的起始地址。结构体的成员变量要对齐排放（对于非对齐成员需要在其前面填充一些字节，保证其在对齐位置上），结构体本身也要根据自身的有效对齐值圆整(就是结`构体总长度`需要是结构体有效对齐值的整数倍)。\n\n通过上面的分析，对结构体进行字节对齐，我们需要知道四个值：\n1\t指定对齐值：代码中指定的对齐值，记为packLen；\n2\t默认对齐值：结构体中每个数据成员及结构体本身都有默认对齐值，记为defaultLen；\n3\t成员偏移量：即相对于结构体起始位置的长度，记为offset；\n4\t成员长度：结构体中每个数据成员的长度（注结构体成员为补齐之后的长度），记为memberLen。\n\n及两个规则：\n1\t对齐规则：`offset % vaildLen = 0`，其中vaildLen为有效对齐值`vaildLen = min(packLen, defaultLen)`；\n2\t填充规则：如成员变量不遵守对齐规则，则需要对其补齐；在其前面填充一些字节保证该成员对齐。需填充的字节数记为padLen：\n\n    ```\n    padLen = getPadLen(offset , defaultLen);\n    \n    int getPadLen(int offsetLen, int defaultLen)\n    {\n        int vaildLen = min(packLen,defaultLen);\n        if(0 == vaildLen || 0 == offsetLen % vaildLen)\n        {\n            return 0;\n        }\n        return vaildLen - (offsetLen % vaildLen);\n    }\n    ```\n     \n\n结构体对齐算法思想：深度优先填充\n1\t先对齐内层结构体；\n2\t对每个数据成员计算其`defaultLen`、`memberLen`和`offset`；\n    a\t在遍历每个数据成员时计算；\n    b\t对于基本数据类型成员`defaultLen=memberLen`；对于结构体成员`defaultLen`等于它的所有成员的最大的`memberLen`；\n    c\t遍历时对成员的`memberLen`进行累加，得到当前成员的`offsetLen`；\n3\t运用对齐及填充规则：在当前结构体成员前填充padLen个字节；\n","source":"_posts/C语言结构体对齐算法.md","raw":"title: C语言结构体对齐算法\ndate: 2013-10-23 15:20:16\ntags: [结构体对齐,算法]\n\n---\n\n最近做了一个关于结构体补齐填充的东西，补了一下关于结构体对齐方面的知识（以前也研究过，不过都忘了，所以在这记录一下）。\n\n\n首先看一下结构体对齐的三个概念值： \n\n1\t数据类型的*默认对齐值*（自身对齐）\n  * 基本数据类型：为指定平台上基本类型的长度。如在32位机器中，char对齐值为1，short为2，int,float为4，double为8；\n  * 结构体：其数据成员中默认对齐值最大的那个值。\n    \n2\t*指定对齐值*：#pragma pack (value)时的指定对齐值value。 \n3\t数据类型的*有效对齐值*：默认对齐值和指定对齐值中小的那个值。\n\n有了这些值，我们就可以很方便的来讨论具体数据结构的成员和其自身的对齐方式。有效对齐值N是最终用来决定数据存放地址方式的值，最重要。有效对齐N，就是表示“对齐在N上”，也就是说该数据的`偏移量`%N=0”。而数据结构中的数据变量都是按定义的先后顺序来排放的。第一个数据变量的起始地址就是数据结构的起始地址。结构体的成员变量要对齐排放（对于非对齐成员需要在其前面填充一些字节，保证其在对齐位置上），结构体本身也要根据自身的有效对齐值圆整(就是结`构体总长度`需要是结构体有效对齐值的整数倍)。\n\n通过上面的分析，对结构体进行字节对齐，我们需要知道四个值：\n1\t指定对齐值：代码中指定的对齐值，记为packLen；\n2\t默认对齐值：结构体中每个数据成员及结构体本身都有默认对齐值，记为defaultLen；\n3\t成员偏移量：即相对于结构体起始位置的长度，记为offset；\n4\t成员长度：结构体中每个数据成员的长度（注结构体成员为补齐之后的长度），记为memberLen。\n\n及两个规则：\n1\t对齐规则：`offset % vaildLen = 0`，其中vaildLen为有效对齐值`vaildLen = min(packLen, defaultLen)`；\n2\t填充规则：如成员变量不遵守对齐规则，则需要对其补齐；在其前面填充一些字节保证该成员对齐。需填充的字节数记为padLen：\n\n    ```\n    padLen = getPadLen(offset , defaultLen);\n    \n    int getPadLen(int offsetLen, int defaultLen)\n    {\n        int vaildLen = min(packLen,defaultLen);\n        if(0 == vaildLen || 0 == offsetLen % vaildLen)\n        {\n            return 0;\n        }\n        return vaildLen - (offsetLen % vaildLen);\n    }\n    ```\n     \n\n结构体对齐算法思想：深度优先填充\n1\t先对齐内层结构体；\n2\t对每个数据成员计算其`defaultLen`、`memberLen`和`offset`；\n    a\t在遍历每个数据成员时计算；\n    b\t对于基本数据类型成员`defaultLen=memberLen`；对于结构体成员`defaultLen`等于它的所有成员的最大的`memberLen`；\n    c\t遍历时对成员的`memberLen`进行累加，得到当前成员的`offsetLen`；\n3\t运用对齐及填充规则：在当前结构体成员前填充padLen个字节；\n","slug":"C语言结构体对齐算法","published":1,"updated":"2015-06-23T00:11:08.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cib8n538k0007d49gq7lkby8b"},{"title":"C语言基础之内存分配","date":"2013-11-12T07:20:16.000Z","_content":"\n# C语言基础之内存分配\n\n```c\n// main.c\n#include <stdio.h>\n\nint a1 = 0;                      // a1 在全局已初始化数据区\nstatic int sa = 0;               // sa 为全局（静态）数据，存在于已初始化数据区\nint a2 = 0;                      // a2 同a1\nint b;                           // b  未初始化全局变量，在bss区\nint main()\n{\n    int c1 = 1;                  // c1 在栈区\n    int c2;                      // c2 同c1\n\n    char *d = (char *)malloc(10);// d  在栈区，分配的10个字节在堆区\n    char *e = (char *)malloc(20);// e  在栈区，分配的20个字节在堆区\n\n    static int f = 0;            // f  同sa\n\n    char *g = \"123\";             // g  在栈区，123\\0 为常量，数据区（只读）\n\n    printf(\"a1:%p\\n\",&a1);\n    printf(\"a2:%p\\n\",&a2);\n    printf(\"sa:%p\\n\",&sa);\n    printf(\"f :%p\\n\",&f);\n    printf(\"b :%p\\n\",&b);\n    printf(\"c1:%p\\n\",&c1);\n    printf(\"c2:%p\\n\",&c2);\n    printf(\"d :%p\\n\",&d);\n    printf(\"e :%p\\n\",&e);\n    printf(\"g :%p\\n\",&g);\n    printf(\"*d:%p\\n\",d);\n    printf(\"*e:%p\\n\",e);\n    printf(\"*g:%p\\n\",g);\n    printf(\"  :%p\\n\",&\"123\");     // 123\\0 为常量，数据区（只读）\n\n    free(d);\n    free(e);\n\n    return 0;\n}\n\n```\n\n<!-- more -->\n\n## 1. 存储时内存结构\n下面列出C语言可执行程序的基本情况（Linux/Gcc）：\n```bash\n$ file test\ntest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),\ndynamically linked (uses shared libs), for GNU/Linux 2.6.32,\nBuildID[sha1]=0x707bb98b5c2af90d210b5826cb3e7b8c7fe0e384,\nnot stripped\n$ cc main.c -o test\n$ size test\n   text    data     bss     dec     hex filename\n   1802     576      24    2402     962 test\n```\n可以看出，此可执行程序在存储时（没有调入到内存）分为代码区（text）、数据区（data）和未初始化数据区（bss）3个部分。\n\n- 代码区（text）\n    存放CPU执行的机器指令。通常，代码区是可共享的（即另外的执行程序可以调用它），因为对于频繁被执行的程序，只需要在内存中有一份代码即可。代码区通常是只读的，使其只读的原因是防止程序意外地修改了它的指令。另外，代码区还规划了局部变量的相关信息。\n- 数据区（data）\n        该区包含了在程序中明确被初始化的全局变量、静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）。\n- 未初始化数据区（bss）\n        存入的是全局未初始化变量。BSS这个叫法是根据一个早期的汇编运算符而来，这个汇编运算符标志着一个块的开始。BSS区的数据在程序开始执行之前被内核初始化为0或者空指针（NULL）。\n\n## 2. 运行时内存分布\n\n![memory layout][1]\n\n上图所示为可执行代码存储时结构和运行时结构的对照图。\n\n```bash\n$ ./test\na1:0x804a02c                 ----------|\na2:0x804a030                           |\nsa:0x804a034                           |--> 数据区\nf :0x804a038                 ----------|\nb :0x804a03c                 ----------|--> 未初始化数据区\nc1:0xbf9a0adc                ----------|\nc2:0xbf9a0ae0                          |\nd :0xbf9a0ae4                          |--> 栈区\ne :0xbf9a0ae8                          |\ng :0xbf9a0aec                ----------|\n*d:0x8a3d008                 ----------|\n*e:0x8a3d018                 ----------|--> 堆区\n*g:0x8048678                 ----------|\n  :0x8048678                 ----------|--> 数据区（只读）\n```\n\n一个正在运行着的C程序占用的内存分为代码区、初始化数据区、未初始化数据区、堆区和栈区5个部分。\n\n- 栈区（stack）\n    由编译器自动分配释放，存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈。每当一个函数被调用，该函数返回地址和一些关于调用的信息，比如某些寄存器的内容，被存储到栈区。然后这个被调用的函数再为它的自动变量和临时变量在栈区上分配空间，这就是C实现函数递归调用的方法。每执行一次递归函数调用，一个新的栈框架就会被使用，这样这个新实例栈里的变量就不会和该函数的另一个实例栈里面的变量混淆\n- 堆区（heap）\n    用于动态内存分配。堆在内存中位于bss区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时有可能由OS回收。\n\n## 3. 程序分区的原因\n- 一个进程在运行过程中，代码是根据流程依次执行的，只需要访问一次，当然跳转和递归有可能使代码执行多次，而数据一般都需要访问多次，因此单独开辟空间以方便访问和节约空间。\n- 临时数据及需要再次使用的代码在运行时放入栈区中，生命周期短。\n- 全局数据和静态数据有可能在整个程序执行过程中都需要访问，因此单独存储管理。\n- 堆区由用户自由分配，以便管理。\n\n## 4. 内存分配方式\n\n在C语言中，可以使用静态或动态的方式分配内存空间。\n\n- 静态分配：编译器在处理程序源代码时分配\n- 动态分配：程序在执行时调用malloc库函数申请分配\n\n静态与动态内存分配的主要区别如下：\n\n- 静态内存分配是在程序执行之前进行的因而效率比较高，而动态内存分配则可以灵活的处理未知数目的。\n- 静态对象是有名字的变量，可以直接对其进行操作；动态对象是没有名字的变量，需要通过指针间接地对它进行操作。\n- 静态对象的分配与释放由编译器自动处理；动态对象的分配与释放必须由程序员显式地管理，它通过malloc()和free两个函数（C++中为new和delete运算符）来完成。\n\n[1]: http://static.oschina.net/uploads/img/201306/25114106_BIx4.jpg\n","source":"_posts/C语言基础之内存分配.md","raw":"title: C语言基础之内存分配\ndate: 2013-11-12 15:20:16\ncategories: C/C++\ntags: [内存分配]\n\n---\n\n# C语言基础之内存分配\n\n```c\n// main.c\n#include <stdio.h>\n\nint a1 = 0;                      // a1 在全局已初始化数据区\nstatic int sa = 0;               // sa 为全局（静态）数据，存在于已初始化数据区\nint a2 = 0;                      // a2 同a1\nint b;                           // b  未初始化全局变量，在bss区\nint main()\n{\n    int c1 = 1;                  // c1 在栈区\n    int c2;                      // c2 同c1\n\n    char *d = (char *)malloc(10);// d  在栈区，分配的10个字节在堆区\n    char *e = (char *)malloc(20);// e  在栈区，分配的20个字节在堆区\n\n    static int f = 0;            // f  同sa\n\n    char *g = \"123\";             // g  在栈区，123\\0 为常量，数据区（只读）\n\n    printf(\"a1:%p\\n\",&a1);\n    printf(\"a2:%p\\n\",&a2);\n    printf(\"sa:%p\\n\",&sa);\n    printf(\"f :%p\\n\",&f);\n    printf(\"b :%p\\n\",&b);\n    printf(\"c1:%p\\n\",&c1);\n    printf(\"c2:%p\\n\",&c2);\n    printf(\"d :%p\\n\",&d);\n    printf(\"e :%p\\n\",&e);\n    printf(\"g :%p\\n\",&g);\n    printf(\"*d:%p\\n\",d);\n    printf(\"*e:%p\\n\",e);\n    printf(\"*g:%p\\n\",g);\n    printf(\"  :%p\\n\",&\"123\");     // 123\\0 为常量，数据区（只读）\n\n    free(d);\n    free(e);\n\n    return 0;\n}\n\n```\n\n<!-- more -->\n\n## 1. 存储时内存结构\n下面列出C语言可执行程序的基本情况（Linux/Gcc）：\n```bash\n$ file test\ntest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),\ndynamically linked (uses shared libs), for GNU/Linux 2.6.32,\nBuildID[sha1]=0x707bb98b5c2af90d210b5826cb3e7b8c7fe0e384,\nnot stripped\n$ cc main.c -o test\n$ size test\n   text    data     bss     dec     hex filename\n   1802     576      24    2402     962 test\n```\n可以看出，此可执行程序在存储时（没有调入到内存）分为代码区（text）、数据区（data）和未初始化数据区（bss）3个部分。\n\n- 代码区（text）\n    存放CPU执行的机器指令。通常，代码区是可共享的（即另外的执行程序可以调用它），因为对于频繁被执行的程序，只需要在内存中有一份代码即可。代码区通常是只读的，使其只读的原因是防止程序意外地修改了它的指令。另外，代码区还规划了局部变量的相关信息。\n- 数据区（data）\n        该区包含了在程序中明确被初始化的全局变量、静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）。\n- 未初始化数据区（bss）\n        存入的是全局未初始化变量。BSS这个叫法是根据一个早期的汇编运算符而来，这个汇编运算符标志着一个块的开始。BSS区的数据在程序开始执行之前被内核初始化为0或者空指针（NULL）。\n\n## 2. 运行时内存分布\n\n![memory layout][1]\n\n上图所示为可执行代码存储时结构和运行时结构的对照图。\n\n```bash\n$ ./test\na1:0x804a02c                 ----------|\na2:0x804a030                           |\nsa:0x804a034                           |--> 数据区\nf :0x804a038                 ----------|\nb :0x804a03c                 ----------|--> 未初始化数据区\nc1:0xbf9a0adc                ----------|\nc2:0xbf9a0ae0                          |\nd :0xbf9a0ae4                          |--> 栈区\ne :0xbf9a0ae8                          |\ng :0xbf9a0aec                ----------|\n*d:0x8a3d008                 ----------|\n*e:0x8a3d018                 ----------|--> 堆区\n*g:0x8048678                 ----------|\n  :0x8048678                 ----------|--> 数据区（只读）\n```\n\n一个正在运行着的C程序占用的内存分为代码区、初始化数据区、未初始化数据区、堆区和栈区5个部分。\n\n- 栈区（stack）\n    由编译器自动分配释放，存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈。每当一个函数被调用，该函数返回地址和一些关于调用的信息，比如某些寄存器的内容，被存储到栈区。然后这个被调用的函数再为它的自动变量和临时变量在栈区上分配空间，这就是C实现函数递归调用的方法。每执行一次递归函数调用，一个新的栈框架就会被使用，这样这个新实例栈里的变量就不会和该函数的另一个实例栈里面的变量混淆\n- 堆区（heap）\n    用于动态内存分配。堆在内存中位于bss区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时有可能由OS回收。\n\n## 3. 程序分区的原因\n- 一个进程在运行过程中，代码是根据流程依次执行的，只需要访问一次，当然跳转和递归有可能使代码执行多次，而数据一般都需要访问多次，因此单独开辟空间以方便访问和节约空间。\n- 临时数据及需要再次使用的代码在运行时放入栈区中，生命周期短。\n- 全局数据和静态数据有可能在整个程序执行过程中都需要访问，因此单独存储管理。\n- 堆区由用户自由分配，以便管理。\n\n## 4. 内存分配方式\n\n在C语言中，可以使用静态或动态的方式分配内存空间。\n\n- 静态分配：编译器在处理程序源代码时分配\n- 动态分配：程序在执行时调用malloc库函数申请分配\n\n静态与动态内存分配的主要区别如下：\n\n- 静态内存分配是在程序执行之前进行的因而效率比较高，而动态内存分配则可以灵活的处理未知数目的。\n- 静态对象是有名字的变量，可以直接对其进行操作；动态对象是没有名字的变量，需要通过指针间接地对它进行操作。\n- 静态对象的分配与释放由编译器自动处理；动态对象的分配与释放必须由程序员显式地管理，它通过malloc()和free两个函数（C++中为new和delete运算符）来完成。\n\n[1]: http://static.oschina.net/uploads/img/201306/25114106_BIx4.jpg\n","slug":"C语言基础之内存分配","published":1,"updated":"2015-06-24T06:34:22.000Z","_id":"cibadwtny00001d9gaasshwgn","comments":1,"layout":"post","photos":[],"link":""}],"PostAsset":[],"PostCategory":[{"post_id":"cibadwtny00001d9gaasshwgn","category_id":"cibadyikq00004q9gccn4fjf7","_id":"cibadyiks00014q9gsoccqpxy"}],"PostTag":[{"post_id":"cib8n538b0002d49g5dfwc8ov","tag_id":"cib8n538g0003d49gcongezn5","_id":"cib8n538i0005d49ga3yutg71"},{"post_id":"cib8n538b0002d49g5dfwc8ov","tag_id":"cib8n538i0004d49gn60h8eb0","_id":"cib8n538j0006d49g3qlawilb"},{"post_id":"cib8n538k0007d49gq7lkby8b","tag_id":"cib8n538m0008d49g0kmtwlyu","_id":"cib8n538n000ad49gdijd0ohg"},{"post_id":"cib8n538k0007d49gq7lkby8b","tag_id":"cib8n538m0009d49gdrn1exk7","_id":"cib8n538n000bd49gae1qogsk"},{"post_id":"cibadwtny00001d9gaasshwgn","tag_id":"cibadwto400011d9g7lrfx65f","_id":"cibadwto600021d9g6inu5iu4"}],"Tag":[{"name":"Git","_id":"cib8n538g0003d49gcongezn5"},{"name":"gitignore","_id":"cib8n538i0004d49gn60h8eb0"},{"name":"结构体对齐","_id":"cib8n538m0008d49g0kmtwlyu"},{"name":"算法","_id":"cib8n538m0009d49gdrn1exk7"},{"name":"内存分配","_id":"cibadwto400011d9g7lrfx65f"}]}}